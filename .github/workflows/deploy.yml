name: Deploy to Production

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PHP_VERSION: "8.4"
  NODE_VERSION: "20"

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_pgsql, redis, bcmath, gd, zip
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env
        run: |
          cp .env.example .env || cp .env.ci .env || echo "APP_KEY=" > .env
          php artisan key:generate

      - name: Set testing environment
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=test_db" >> .env
          echo "DB_USERNAME=test_user" >> .env
          echo "DB_PASSWORD=test_password" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test || echo "⚠️ Pint check failed, but continuing..."

  build-assets:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: public/build
          retention-days: 1

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [tests, build-assets]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: public/build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
        run: |
          # Sync files to server
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='.env' \
            ./ $SERVER_USER@$SERVER_HOST:$SERVER_PATH/

          # Execute deployment commands on server
          ssh $SERVER_USER@$SERVER_HOST "bash -s" << 'EOF'
            set -e
            cd ${{ secrets.SERVER_PATH }}

            echo "🚀 Starting deployment..."

            # Install composer dependencies
            docker exec itcapital-app composer install --no-dev --optimize-autoloader --no-interaction

            # Run migrations
            docker exec itcapital-app php artisan migrate --force

            # Clear and cache config
            docker exec itcapital-app php artisan config:cache
            docker exec itcapital-app php artisan route:cache
            docker exec itcapital-app php artisan view:cache

            # Clear application cache
            docker exec itcapital-app php artisan cache:clear

            # Restart services
            docker-compose -f docker-compose.production.yml restart app

            # Restart Reverb
            docker exec itcapital-app supervisorctl restart reverb

            # Check services health
            docker-compose -f docker-compose.production.yml ps

            echo "✅ Deployment completed successfully!"
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
