name: Tests

on:
  pull_request:
    branches:
      - main
      - master
      - develop
  push:
    branches:
      - develop

env:
  PHP_VERSION: "8.4"
  NODE_VERSION: "20"

jobs:
  tests:
    name: Run Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.3", "8.4"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, pdo, pdo_pgsql, redis, bcmath, gd, zip
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: Copy .env
        run: |
          cp .env.example .env || echo "APP_KEY=" > .env
          php artisan key:generate

      - name: Set testing environment
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=test_db" >> .env
          echo "DB_USERNAME=test_user" >> .env
          echo "DB_PASSWORD=test_password" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests with coverage
        run: php artisan test --coverage --min=70

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test

      # PHPStan временно отключен
      # - name: Run PHPStan
      #   run: ./vendor/bin/phpstan analyse --memory-limit=2G || true

  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Check for build errors
        run: |
          if [ ! -d "public/build" ]; then
            echo "❌ Build directory not found!"
            exit 1
          fi
          echo "✅ Build successful!"
